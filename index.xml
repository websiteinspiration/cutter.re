<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://cutter.re//index.xml" rel="self" type="application/atom+xml" /><link href="https://cutter.re//" rel="alternate" type="text/html" /><updated>2020-03-05T08:44:55+00:00</updated><id>https://cutter.re//index.xml</id><title type="html">Cutter</title><subtitle>Open Source RE Platform powered by radare2.</subtitle><entry><title type="html">5 Ways to patch binaries with Cutter</title><link href="https://cutter.re//5-ways-to-patch-binaries-with-cutter" rel="alternate" type="text/html" title="5 Ways to patch binaries with Cutter" /><published>2019-12-26T00:00:00+00:00</published><updated>2019-12-26T00:00:00+00:00</updated><id>https://cutter.re//5-ways-to-patch-binaries-with-cutter</id><content type="html" xml:base="https://cutter.re//5-ways-to-patch-binaries-with-cutter">&lt;p&gt;I recently watched &lt;a href=&quot;https://www.youtube.com/watch?v=LyNyf3UM9Yc&quot;&gt;a video&lt;/a&gt; by LiveOverflow in which he showed how different tools are used to patch binaries. By demonstrating some of the features that Radare2, Ghidra, and Binary Ninja offer for the task, the viewer can get some sense of the things they can get from using these tools.&lt;/p&gt;
&lt;p&gt;While all these tools are great, and although Radare2 was showed there (and oh boy, things went wrong), there was one tool, which is dear to my heart, that wasn’t there – &lt;a href=&quot;https://cutter.re/&quot;&gt;Cutter&lt;/a&gt;. Notwithstanding that it is the youngest member of the pack, Cutter is growing up very fast and when it has to do with binary patching – it does not stay behind.&lt;/p&gt;
&lt;p&gt;“Binary Patching”, for those the term is unfamiliar, is the process of applying small changes and modifications to a binary file, usually in order to change its behavior. By modifying data or code, the user can change certain values in the program or specific instructions, and adjust the binary to their desired outcome.&lt;/p&gt;

&lt;p&gt;Cutter makes patching binaries a simple task - here are 5 ways to do so.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.megabeets.net/5-ways-to-patch-binaries-with-cutter/&quot; target=&quot;_blank&quot; class=&quot;dwn-btn3 btn btn-primary&quot;&gt;&lt;span&gt;Read on Megabeets’ website&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;but&gt;
&lt;/but&gt;</content><author><name>Itay Cohen</name></author><category term="Patching" /><summary type="html">I recently watched a video by LiveOverflow in which he showed how different tools are used to patch binaries. By demonstrating some of the features that Radare2, Ghidra, and Binary Ninja offer for the task, the viewer can get some sense of the things they can get from using these tools. While all these tools are great, and although Radare2 was showed there (and oh boy, things went wrong), there was one tool, which is dear to my heart, that wasn’t there – Cutter. Notwithstanding that it is the youngest member of the pack, Cutter is growing up very fast and when it has to do with binary patching – it does not stay behind. “Binary Patching”, for those the term is unfamiliar, is the process of applying small changes and modifications to a binary file, usually in order to change its behavior. By modifying data or code, the user can change certain values in the program or specific instructions, and adjust the binary to their desired outcome.</summary></entry><entry><title type="html">Defeating a Ransomware using Cutter’s Emulation</title><link href="https://cutter.re//defeating-a-ransomware-with-cutter" rel="alternate" type="text/html" title="Defeating a Ransomware using Cutter's Emulation" /><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><id>https://cutter.re//defeating-a-ransomware-with-cutter</id><content type="html" xml:base="https://cutter.re//defeating-a-ransomware-with-cutter">&lt;p&gt;Last week I attended the &lt;a href=&quot;https://www.radare.org/con/2019/&quot;&gt;r2con conference&lt;/a&gt; for the first time (for those who haven't heard about it before, it is a reverse engineering conference focused on &lt;a href=&quot;https://www.radare.org/r/&quot;&gt;radare2&lt;/a&gt;) and apart from listening to great talks, I signed up for the basic trainings since I had not used r2 in the past and my RE experience is quite basic. One of the trainings was &quot;Dissecting binaries with Cutter&quot; given by &lt;a href=&quot;https://twitter.com/xarkes_&quot;&gt;Antide Petit&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/megabeets_&quot;&gt;Itay cohen&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/thestr4ng3r&quot;&gt;Florian Märkl&lt;/a&gt;. It was an introduction to the official GUI application for r2, &lt;a href=&quot;https://cutter.re/&quot;&gt;Cutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the training, there were 3 different exercises and one of them was about reversing a binary called &lt;em&gt;&quot;M1ghty Ransomware.exe&quot;&lt;/em&gt; which by the name of it, you can guess what it is. Along with the binary, there was also a PNG file called &lt;em&gt;&quot;flag.png&quot;&lt;/em&gt; that was encrypted by the malware. We had to use Cutter to analyse the binary and figure out the encryption algorithms, the keys used for the encryption, and finally write a script to decrypt the png file. Sounds easy, right? Well, it took me a while to figure it out. Let's dissect it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://camaya.co/posts/2019/09/11/defeating-a-ransomware-with-cutter/&quot; target=&quot;_blank&quot; class=&quot;dwn-btn3 btn btn-primary&quot;&gt;&lt;span&gt;Read on Cristhian Amaya’s website&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;but&gt;
&lt;/but&gt;</content><author><name>Cutter Team</name></author><category term="Guest article" /><summary type="html">Last week I attended the r2con conference for the first time (for those who haven't heard about it before, it is a reverse engineering conference focused on radare2) and apart from listening to great talks, I signed up for the basic trainings since I had not used r2 in the past and my RE experience is quite basic. One of the trainings was &quot;Dissecting binaries with Cutter&quot; given by Antide Petit, Itay cohen, and Florian Märkl. It was an introduction to the official GUI application for r2, Cutter.</summary></entry><entry><title type="html">Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 1</title><link href="https://cutter.re//analyzing-dropshot-part-1" rel="alternate" type="text/html" title="Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 1" /><published>2019-07-26T09:12:09+00:00</published><updated>2019-07-26T09:12:09+00:00</updated><id>https://cutter.re//analyzing-dropshot-part-1</id><content type="html" xml:base="https://cutter.re//analyzing-dropshot-part-1">&lt;h1 id=&quot;prologue&quot;&gt;Prologue&lt;/h1&gt;

&lt;p&gt;As a reverse engineer and malware researcher, the tools I use are super important for me. I have invested hours and hours in creating the best malware analysis environment for myself and chose the best tools for me and my needs. For the last two years, radare2 is my go-to tool for a lot of reverse-engineering tasks such as automating RE related work, scripting, CTFing, exploitation and more. That said, I almost never used radare2 for malware analysis, or more accurately, for analysis of malware for Windows.&lt;/p&gt;
&lt;p&gt;The main reason was that radare2 command-line interface felt too clumsy, complicated and an over-kill. IDA Pro was simply better for these tasks, a quick inspection of functions, data structures, renaming, commenting, et cetera. It felt more intuitive for me and that what I was searching for while doing malware analysis. And then came Cutter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-1/&quot; target=&quot;_blank&quot; class=&quot;dwn-btn3 btn btn-primary&quot;&gt;&lt;span&gt;Read on megabeets.net&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;but&gt;
&lt;/but&gt;</content><author><name>Itay Cohen</name></author><category term="Plugins" /><summary type="html">Prologue</summary></entry><entry><title type="html">Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 2</title><link href="https://cutter.re//analyzing-dropshot-part-2" rel="alternate" type="text/html" title="Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 2" /><published>2019-07-26T09:12:09+00:00</published><updated>2019-07-26T09:12:09+00:00</updated><id>https://cutter.re//analyzing-dropshot-part-2</id><content type="html" xml:base="https://cutter.re//analyzing-dropshot-part-2">&lt;h1 id=&quot;prologue&quot;&gt;Prologue&lt;/h1&gt;

&lt;p&gt;Previously, in the first part of this article, we used Cutter, a GUI for radare2, to statically analyze APT33’s Dropshot malware. We also used radare2’s Python scripting capabilities in order to decrypt encrypted strings in Dropshot. If you didn’t read the first part yet, I suggest you do it &lt;a href=&quot;https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-21&quot;&gt;now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today’s article will be shorter, now that we are familiar with cutter and r2pipe, we can quickly analyze another interesting component of Dropshot — an encrypted resource that includes Dropshot’s actual payload. So without further ado, let’s start.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-2/&quot; target=&quot;_blank&quot; class=&quot;dwn-btn3 btn btn-primary&quot;&gt;&lt;span&gt;Read on megabeets.net&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;but&gt;
&lt;/but&gt;</content><author><name>Itay Cohen</name></author><category term="Plugins" /><summary type="html">Prologue</summary></entry></feed>